"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/layout",{

/***/ "(app-pages-browser)/./src/shared/api/signature.ts":
/*!*************************************!*\
  !*** ./src/shared/api/signature.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSignature: function() { return /* binding */ createSignature; },\n/* harmony export */   getAuthHeaders: function() { return /* binding */ getAuthHeaders; }\n/* harmony export */ });\n/* harmony import */ var crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js/hmac-sha512 */ \"(app-pages-browser)/./node_modules/crypto-js/hmac-sha512.js\");\n/* harmony import */ var crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0__);\n\n// /**\n//  * Создает HMAC SHA-512 подпись для запроса\n//  * @param body - тело запроса\n//  * @param secretKey - секретный ключ пользователя\n//  * @param method - HTTP метод (GET, POST, etc.)\n//  * @param url - URL запроса\n//  * @returns hex-строка с подписью\n//  */\n// export const createSignature = (\n//   body: any,\n//   secretKey: string,\n//   method?: string,\n//   url?: string\n// ): string => {\n//   let payload = '';\n//   if (body === undefined || body === null) {\n//     payload = '{}'; // Пустой объект для отсутствующего тела\n//   } else if (typeof body === 'string') {\n//     payload = body;\n//   } else {\n//     try {\n//       payload = JSON.stringify(body);\n//     } catch (error) {\n//       console.error('Error stringifying body:', error);\n//       payload = '{}';\n//     }\n//   }\n//   // Формируем данные для подписи\n//   let signatureData = payload;\n//   if (method && url) {\n//     signatureData = `${method.toUpperCase()}:${url}:${payload}`;\n//   }\n//   console.log('Signature payload:', signatureData);\n//   console.log('Signature secret key:', secretKey);\n//   // Создаем HMAC SHA-512 подпись\n//   const signature = HmacSHA512(signatureData, secretKey).toString();\n//   console.log('Generated signature:', signature);\n//   return signature;\n// };\n// /**\n//  * Возвращает заголовки с аутентификацией для запроса\n//  * @param user - данные пользователя\n//  * @param body - тело запроса\n//  * @param method - HTTP метод\n//  * @param url - URL запроса\n//  * @returns объект с заголовками\n//  */\n// export const getAuthHeaders = (\n//   user: User,\n//   body?: any,\n//   method?: string,\n//   url?: string\n// ): Record<string, string> => {\n//   const timestamp = Date.now().toString();\n//   // Формируем заголовки согласно документации API\n//   const headers = {\n//     'user-id': user.userId,\n//     'x-timestamp': timestamp,\n//     'x-signature': createSignature(body, user.secretKey, method, url),\n//   };\n//   console.log('Auth headers:', headers);\n//   return headers;\n// };\nconst createSignature = (body, secretKey, method, url)=>{\n    let payload = \"\";\n    if (body === undefined || body === null) {\n        payload = \"{}\"; // Пустой объект для отсутствующего тела\n    } else if (typeof body === \"string\") {\n        payload = body;\n    } else {\n        try {\n            payload = JSON.stringify(body);\n        } catch (error) {\n            console.error(\"Error stringifying body:\", error);\n            payload = \"{}\";\n        }\n    }\n    // Формируем данные для подписи\n    let signatureData = payload;\n    if (method && url) {\n        // Исправление: удаляем префикс /api и нормализуем путь\n        const cleanUrl = url.replace(/^\\/api\\//, \"/\").replace(/\\/+/g, \"/\");\n        signatureData = \"\".concat(method.toUpperCase(), \":\").concat(cleanUrl, \":\").concat(payload);\n    }\n    console.log(\"Signature payload:\", signatureData);\n    console.log(\"Signature secret key:\", secretKey);\n    // Создаем HMAC SHA-512 подпись\n    const signature = crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0___default()(signatureData, secretKey).toString();\n    console.log(\"Generated signature:\", signature);\n    return signature;\n};\n/**\n * Возвращает заголовки с аутентификацией для запроса\n * @param user - данные пользователя\n * @param body - тело запроса\n * @param method - HTTP метод\n * @param url - URL запроса\n * @returns объект с заголовками\n */ const getAuthHeaders = (user, body, method, url)=>{\n    const timestamp = Date.now().toString();\n    // Формируем заголовки согласно документации API\n    const headers = {\n        \"user-id\": user.userId,\n        \"x-timestamp\": timestamp,\n        \"x-signature\": createSignature(body, user.secretKey, method, url)\n    };\n    console.log(\"Auth headers:\", headers);\n    return headers;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/api/signature.ts\n"));

/***/ })

});