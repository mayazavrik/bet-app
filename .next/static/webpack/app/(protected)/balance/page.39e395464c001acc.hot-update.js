"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/balance/page",{

/***/ "(app-pages-browser)/./src/entities/balance/api/index.ts":
/*!*******************************************!*\
  !*** ./src/entities/balance/api/index.ts ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   balanceApi: function() { return /* binding */ balanceApi; }\n/* harmony export */ });\n/* harmony import */ var _shared_api_base_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/shared/api/base-api */ \"(app-pages-browser)/./src/shared/api/base-api.ts\");\n\n/**\n * API сервис для работы с балансом\n */ const balanceApi = {\n    /**\n   * Получает текущий баланс пользователя\n   * @returns Promise с балансом пользователя\n   */ getBalance: async ()=>{\n        try {\n            const response = await _shared_api_base_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"/balance\", {});\n            console.log(\"Get balance response:\", response);\n            // API не возвращает стандартную структуру ApiResponse для баланса,\n            // а возвращает просто { balance: number }\n            if (response.data.balance !== undefined) {\n                return response.data.balance;\n            }\n            throw new Error(\"Failed to get balance: Invalid response format\");\n        } catch (error) {\n            console.error(\"Balance API error:\", error);\n            // Улучшенная обработка ошибок\n            if (error.response) {\n                var _error_response_data;\n                if (error.response.data && error.response.data.balance !== undefined) {\n                    // Если в ответе есть баланс, вернем его даже при ошибке\n                    return error.response.data.balance;\n                }\n                const errorMessage = ((_error_response_data = error.response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) || \"Failed to get balance\";\n                throw new Error(errorMessage);\n            }\n            throw error;\n        }\n    },\n    /**\n   * Устанавливает начальный баланс пользователя\n   * @param balance - начальный баланс\n   * @returns Promise с установленным балансом\n   */ setBalance: async (balance)=>{\n        const payload = {\n            amount: balance\n        };\n        try {\n            console.log(\"Setting balance with payload:\", payload);\n            const response = await _shared_api_base_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"/balance\", payload);\n            console.log(\"Balance response:\", response.data);\n            // Напрямую проверяем наличие баланса в ответе\n            if (response.data && response.data.balance !== undefined) {\n                return response.data.balance;\n            }\n            // Если получили ответ 200, но без данных о балансе, просто возвращаем запрошенный баланс\n            if (response.status === 200) {\n                return balance;\n            }\n            throw new Error(\"Failed to set balance: Invalid response format\");\n        } catch (error) {\n            console.error(\"Balance API error:\", error);\n            // Если получили ответ с кодом 200, считаем операцию успешной\n            if (error.response && error.response.status === 200) {\n                if (error.response.data && error.response.data.balance !== undefined) {\n                    return error.response.data.balance;\n                }\n                // Если баланс не вернулся, возвращаем тот, что запрашивали\n                return balance;\n            }\n            // Улучшенная обработка ошибок\n            if (error.response) {\n                var _error_response_data;\n                console.error(\"Error response:\", error.response.data);\n                const errorMessage = ((_error_response_data = error.response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) || \"Failed to set balance\";\n                throw new Error(errorMessage);\n            } else if (error.request) {\n                throw new Error(\"No response received from server. Please check your connection.\");\n            }\n            throw error;\n        }\n    },\n    /**\n   * Проверяет соответствие ожидаемого и фактического баланса\n   * @param expectedBalance - ожидаемый баланс\n   * @returns Promise с результатом проверки\n   */ checkBalance: async (expectedBalance)=>{\n        const payload = {\n            expectedBalance\n        };\n        try {\n            const response = await _shared_api_base_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"/check-balance\", payload);\n            // Проверяем, есть ли в ответе ожидаемая структура\n            if (response.data && (response.data.success !== undefined || response.data.data !== undefined)) {\n                if (!response.data.success) {\n                    throw new Error(response.data.error || \"Failed to check balance\");\n                }\n                return response.data.data;\n            }\n            // Проверяем другой возможный формат ответа\n            if (response.data && response.data.matched !== undefined) {\n                return response.data;\n            }\n            throw new Error(\"Failed to check balance: Invalid response format\");\n        } catch (error) {\n            console.error(\"Balance API error:\", error);\n            // Улучшенная обработка ошибок\n            if (error.response) {\n                var _error_response_data;\n                const errorMessage = ((_error_response_data = error.response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) || \"Failed to check balance\";\n                throw new Error(errorMessage);\n            }\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/entities/balance/api/index.ts\n"));

/***/ })

});