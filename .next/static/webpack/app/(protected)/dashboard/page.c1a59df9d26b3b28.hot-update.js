"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/dashboard/page",{

/***/ "(app-pages-browser)/./src/entities/bet/api/index.ts":
/*!***************************************!*\
  !*** ./src/entities/bet/api/index.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   betApi: function() { return /* binding */ betApi; }\n/* harmony export */ });\n/* harmony import */ var crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js/hmac-sha512 */ \"(app-pages-browser)/./node_modules/crypto-js/hmac-sha512.js\");\n/* harmony import */ var crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * API сервис для работы со ставками\n */ // export const betApi = {\n//   /**\n//    * Получает рекомендуемую ставку\n//    * @returns Promise с рекомендуемой ставкой\n//    */\n//   getRecommendedBet: async (): Promise<number> => {\n//     try {\n//       const response = await api.get<ApiResponse<RecommendedBetResponse>>('/bet');\n//       if (!response.data.success) {\n//         throw new Error(response.data.error || 'Failed to get recommended bet');\n//       }\n//       return response.data.data.recommendedBet;\n//     } catch (error) {\n//       console.error('Bet API error:', error);\n//       throw error;\n//     }\n//   },\n//   /**\n//    * Размещает ставку\n//    * @param bet - сумма ставки\n//    * @returns Promise с идентификатором ставки и обновленным балансом\n//    */\n//   placeBet: async (bet: number): Promise<PlaceBetResponse> => {\n//     const payload: PlaceBetRequest = { bet };\n//     try {\n//       const response = await api.post<ApiResponse<PlaceBetResponse>>('/bet', payload);\n//       if (!response.data.success) {\n//         throw new Error(response.data.error || 'Failed to place bet');\n//       }\n//       return response.data.data;\n//     } catch (error) {\n//       console.error('Bet API error:', error);\n//       throw error;\n//     }\n//   },\n//   /**\n//    * Получает результат ставки\n//    * @param betId - идентификатор ставки\n//    * @returns Promise с результатом ставки и обновленным балансом\n//    */\n//   getWin: async (betId: string): Promise<WinResponse> => {\n//     const payload: WinRequest = { betId };\n//     try {\n//       const response = await api.post<ApiResponse<WinResponse>>('/win', payload);\n//       if (!response.data.success) {\n//         throw new Error(response.data.error || 'Failed to get win result');\n//       }\n//       return response.data.data;\n//     } catch (error) {\n//       console.error('Bet API error:', error);\n//       throw error;\n//     }\n//   }\n// };\n\nconst userId = \"6\"; // Используем фиксированный ID пользователя из route.js\nconst secretKey = \"218dd27aebeccecae69ad8408d9a36bf\"; // Секретный ключ пользователя\n// Функция для формирования заголовков с подписью\nconst getAuthHeaders = function(method, path) {\n    let body = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const timestamp = Date.now().toString();\n    const payload = \"\".concat(method, \":\").concat(path, \":\").concat(JSON.stringify(body));\n    const signature = crypto_js_hmac_sha512__WEBPACK_IMPORTED_MODULE_0___default()(payload, secretKey).toString();\n    return {\n        \"user-id\": userId,\n        \"x-timestamp\": timestamp,\n        \"x-signature\": signature,\n        \"Content-Type\": \"application/json\"\n    };\n};\nconst betApi = {\n    getRecommendedBet: async ()=>{\n        try {\n            const response = await fetch(\"/api/recommended-bet\", {\n                method: \"GET\",\n                headers: getAuthHeaders(\"GET\", \"/api/recommended-bet\")\n            });\n            if (!response.ok) {\n                throw new Error(\"Ошибка: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Ошибка при получении рекомендуемой ставки:\", error);\n            throw error;\n        }\n    },\n    placeBet: async (betAmount)=>{\n        try {\n            // Формируем правильный объект запроса для размещения ставки\n            const betData = {\n                betId: \"bet-\".concat(Date.now()),\n                option: \"win\",\n                amount: betAmount // Сумма ставки\n            };\n            const response = await fetch(\"/api/bet\", {\n                method: \"POST\",\n                headers: getAuthHeaders(\"POST\", \"/api/bet\", betData),\n                body: JSON.stringify(betData)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Ошибка: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Ошибка при размещении ставки:\", error);\n            throw error;\n        }\n    },\n    getWin: async (betId)=>{\n        try {\n            const response = await fetch(\"/api/win?betId=\".concat(betId), {\n                method: \"GET\",\n                headers: getAuthHeaders(\"GET\", \"/api/win?betId=\".concat(betId))\n            });\n            if (!response.ok) {\n                throw new Error(\"Ошибка: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Ошибка при получении результата ставки:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/entities/bet/api/index.ts\n"));

/***/ })

});